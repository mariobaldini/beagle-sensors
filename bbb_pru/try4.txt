Ubuntu 14.10
http://elinux.org/BeagleBoardUbuntu
wget https://rcn-ee.net/deb/rootfs/utopic/ubuntu-utopic-console-armhf-2014-07-06.tar.xz
sudo ./setup_sdcard.sh --probe-mmc
sudo ./setup_sdcard.sh --mmc /dev/sdX --dtb beaglebone


# Enabling PRU

http://www.element14.com/community/community/designcenter/single-board-computers/next-gen_beaglebone//blog/2013/05/22/bbb--working-with-the-pru-icssprussv2
http://www.element14.com/community/thread/23952/l/pinmux--enabling-spi?tstart=0
http://tara.mmto.org/computers/beagle/pru/devel/am335xPruReferenceGuide.pdf
https://bitbucket.org/intelligentagent/pypruss
https://github.com/omcaree/node-pru
http://mythopoeic.org/bbb-pru-minimal/
http://hipstercircuits.com/pypruss-one-library-to-rule-them-all/
http://elinux.org/Ti_AM33XX_PRUSSv2
http://processors.wiki.ti.com/index.php/PRU_Assembly_Instructions













(root)
cd /boot/dtbs
cp am335x-boneblack.dtb am335x-boneblack.dtb_orig
dtc -I dtb -O dts am335x-boneblack.dtb > am335x-boneblack.dts_orig
cp am335x-boneblack.dts_orig am335x-boneblack.dts_pru



dtc -I dts -O dtb am335x-boneblack.dts_pru > am335x-boneblack.dtb_pru
cp am335x-boneblack.dtb_pru am335x-boneblack.dtb






try3 pypruss
(pru example ok)

git clone https://bitbucket.org/intelligentagent/pypruss.git  
cd pypruss
sudo apt-get install python-dev
python setup.py install
export LD_LIBRARY_PATH=/usr/local/lib



pasm -b delay.p
sudo python loop.py
(no pypruss funciona)














delay.p

// Copyright (c) 2014 dhenke@mythopoeic.org
// This is free software -- see COPYING for details.
//
// This is a nearly-minimal PRU program. It delays for five seconds, then
// notifies the host that it has completed, then halts the PRU.
//
// The idea is to have a program that does something you can see from user
// space, without doing anything complicated like playing with IO pins,
// DDR or shared memory.
//
// Try adjusting the DELAYCOUNT value and re-running the test; you should
// be able to convince yourself that the program is actually doing something.

.origin 0 // offset of the start of the code in PRU memory
.entrypoint START // program entry point, used by debugger only

// To signal the host that we're done, we set bit 5 in our R31
// simultaneously with putting the number of the signal we want
// into R31 bits 0-3. See 5.2.2.2 in AM335x PRU-ICSS Reference Guide.
#define PRU0_R31_VEC_VALID (1<<5)
#define PRU0_R31_VEC_NOTVALID (1<<5)
#define SIGNUM 3 // corresponds to PRU_EVTOUT_0

#define DELAY_SECONDS 5 // adjust this to experiment
#define CLOCK 200000000 // PRU is always clocked at 200MHz
#define CLOCKS_PER_LOOP 2 // loop contains two instructions, one clock each

#define DELAYCOUNT DELAY_SECONDS * CLOCK / CLOCKS_PER_LOOP
#define MICRO1000  1         * CLOCK / CLOCKS_PER_LOOP

START:
        // initialize loop counter
    MOV r1, DELAYCOUNT
    MOV R31.b0, PRU0_R31_VEC_NOTVALID | SIGNUM


        // wait for specified period of time
DELAY:
    SUB r1, r1, 1     // decrement loop counter
    QBNE    DELAY, r1, 0  // repeat loop unless zero

FAST:
        // tell host we're done, then halt
    MOV R31.b0, PRU0_R31_VEC_VALID | SIGNUM
    JMP START
    HALT




loop.py

''' blinkled.py - test script for the PyPRUSS library
It blinks the user leds ten times'''

import pypruss
import time
import datetime

pypruss.modprobe()                                  # This only has to be called once pr boot
pypruss.init()                                      # Init the PRU
pypruss.open(0)                                     # Open PRU event 0 which is PRU0_ARM_INTERRUPT
pypruss.pruintc_init()                              # Init the interrupt controller
pypruss.exec_program(0, "./delay.bin")          # Load firmware "blinkled.bin" on PRU 0

t1 = 0
t2 = 0

#while True:

i = 1000
while (i > 0):
    pypruss.wait_for_event(0)                           # Wait for event 0 which is connected to PRU0_ARM_INTERRUPT  
#   t2 = datetime.datetime.now().strftime("%S.%f")
    t2 = time.time()
    print ('%f   %f' % (t2, t2-t1) )
    t1 = t2 
    i -= 1

pypruss.clear_event(0)                              # Clear the event
pypruss.pru_disable(0)                              # Disable PRU 0, this is already done by the firmware
pypruss.exit()                                      # Exit, don't know what this does. 


